using System;
using System.Runtime.InteropServices;
using System.Security.Permissions;
namespace NewsComponents.Net
{
 [GuidAttribute("4991D34B-80A1-4291-83B6-3328366B9097")]
 [ClassInterfaceAttribute(ClassInterfaceType.None)]
 [ComImportAttribute()]
 [SecurityPermission(SecurityAction.Demand, UnmanagedCode = true)]
 internal class BackgroundCopyManager {
 }
 [InterfaceTypeAttribute(ComInterfaceType.InterfaceIsIUnknown)]
 [GuidAttribute("5CE34C0D-0DC9-4C1F-897C-DAA1B78CEE7C")]
 [ComImportAttribute()]
 internal interface IBackgroundCopyManager {
  void CreateJob([MarshalAs(UnmanagedType.LPWStr)] string DisplayName, BG_JOB_TYPE Type, out Guid pJobId, [MarshalAs(UnmanagedType.Interface)] out IBackgroundCopyJob ppJob);
  void GetJob(ref Guid jobID, [MarshalAs(UnmanagedType.Interface)] out IBackgroundCopyJob ppJob);
  void EnumJobs(uint dwFlags, [MarshalAs(UnmanagedType.Interface)] out IEnumBackgroundCopyJobs ppenum);
  void GetErrorDescription([MarshalAs(UnmanagedType.Error)] int hResult, uint LanguageId, [MarshalAs(UnmanagedType.LPWStr)] out string pErrorDescription);
 }
 [ComImport]
 [Guid("97EA99C7-0186-4AD4-8DF9-C5B4E0ED6B22")]
 [InterfaceType(ComInterfaceType.InterfaceIsIUnknown)]
 internal interface IBackgroundCopyCallback {
  void JobTransferred([In, MarshalAs(UnmanagedType.Interface)] IBackgroundCopyJob pJob);
  void JobError([In, MarshalAs(UnmanagedType.Interface)] IBackgroundCopyJob pJob, [In, MarshalAs(UnmanagedType.Interface)] IBackgroundCopyError pError);
  void JobModification([In, MarshalAs(UnmanagedType.Interface)] IBackgroundCopyJob pJob, [In] uint dwReserved);
 }
 [InterfaceTypeAttribute(ComInterfaceType.InterfaceIsIUnknown)]
 [GuidAttribute("37668D37-507E-4160-9316-26306D150B12")]
 [ComImportAttribute()]
 internal interface IBackgroundCopyJob {
  void AddFileSet(uint cFileCount, ref _BG_FILE_INFO pFileSet);
  void AddFile([MarshalAs(UnmanagedType.LPWStr)] string RemoteUrl, [MarshalAs(UnmanagedType.LPWStr)] string LocalName);
  void EnumFiles([MarshalAs(UnmanagedType.Interface)] out IEnumBackgroundCopyFiles pEnum);
  void Suspend();
  void Resume();
  void Cancel();
  void Complete();
  void GetId(out Guid pVal);
  void GetType(out BG_JOB_TYPE pVal);
  void GetProgress(out _BG_JOB_PROGRESS pVal);
  void GetTimes(out _BG_JOB_TIMES pVal);
  void GetState(out BG_JOB_STATE pVal);
  void GetError([MarshalAs(UnmanagedType.Interface)] out IBackgroundCopyError ppError);
  void GetOwner([MarshalAs(UnmanagedType.LPWStr)] out string pVal);
  void SetDisplayName([MarshalAs(UnmanagedType.LPWStr)] string Val);
  void GetDisplayName([MarshalAs(UnmanagedType.LPWStr)] out string pVal);
  void SetDescription([MarshalAs(UnmanagedType.LPWStr)] string Val);
  void GetDescription([MarshalAs(UnmanagedType.LPWStr)] out string pVal);
  void SetPriority(BG_JOB_PRIORITY Val);
  void GetPriority(out BG_JOB_PRIORITY pVal);
  void SetNotifyFlags(uint Val);
  void GetNotifyFlags(out uint pVal);
  void SetNotifyInterface([MarshalAs(UnmanagedType.IUnknown)] object Val);
  void GetNotifyInterface([MarshalAs(UnmanagedType.IUnknown)] out object pVal);
  void SetMinimumRetryDelay(uint Seconds);
  void GetMinimumRetryDelay(out uint Seconds);
  void SetNoProgressTimeout(uint Seconds);
  void GetNoProgressTimeout(out uint Seconds);
  void GetErrorCount(out uint Errors);
  void SetProxySettings(BG_JOB_PROXY_USAGE ProxyUsage, [MarshalAs(UnmanagedType.LPWStr)] string ProxyList, [MarshalAs(UnmanagedType.LPWStr)] string ProxyBypassList);
  void GetProxySettings(out BG_JOB_PROXY_USAGE pProxyUsage, [MarshalAs(UnmanagedType.LPWStr)] out string pProxyList, [MarshalAs(UnmanagedType.LPWStr)] out string pProxyBypassList);
  void TakeOwnership();
 }
 [ComImport]
 [InterfaceType(ComInterfaceType.InterfaceIsIUnknown)]
 [Guid("54B50739-686F-45EB-9DFF-D6A9A0FAA9AF")]
 internal interface IBackgroundCopyJob2 : IBackgroundCopyJob {
  new void AddFileSet(uint cFileCount, ref _BG_FILE_INFO pFileSet);
  new void AddFile([MarshalAs(UnmanagedType.LPWStr)] string RemoteUrl, [MarshalAs(UnmanagedType.LPWStr)] string LocalName);
  new void EnumFiles([MarshalAs(UnmanagedType.Interface)] out IEnumBackgroundCopyFiles pEnum);
  new void Suspend();
  new void Resume();
  new void Cancel();
  new void Complete();
  new void GetId(out Guid pVal);
  new void GetType(out BG_JOB_TYPE pVal);
  new void GetProgress(out _BG_JOB_PROGRESS pVal);
  new void GetTimes(out _BG_JOB_TIMES pVal);
  new void GetState(out BG_JOB_STATE pVal);
  new void GetError([MarshalAs(UnmanagedType.Interface)] out IBackgroundCopyError ppError);
  new void GetOwner([MarshalAs(UnmanagedType.LPWStr)] out string pVal);
  new void SetDisplayName([MarshalAs(UnmanagedType.LPWStr)] string Val);
  new void GetDisplayName([MarshalAs(UnmanagedType.LPWStr)] out string pVal);
  new void SetDescription([MarshalAs(UnmanagedType.LPWStr)] string Val);
  new void GetDescription([MarshalAs(UnmanagedType.LPWStr)] out string pVal);
  new void SetPriority(BG_JOB_PRIORITY Val);
  new void GetPriority(out BG_JOB_PRIORITY pVal);
  void SetNotifyFlags([MarshalAs(UnmanagedType.U4)] BG_JOB_NOTIFICATION_TYPE Val);
  new void GetNotifyFlags(out uint pVal);
  new void SetNotifyInterface([MarshalAs(UnmanagedType.IUnknown)] object Val);
  new void GetNotifyInterface([MarshalAs(UnmanagedType.IUnknown)] out object pVal);
  new void SetMinimumRetryDelay(uint Seconds);
  new void GetMinimumRetryDelay(out uint Seconds);
  new void SetNoProgressTimeout(uint Seconds);
  new void GetNoProgressTimeout(out uint Seconds);
  new void GetErrorCount(out uint Errors);
  new void SetProxySettings(BG_JOB_PROXY_USAGE ProxyUsage, [MarshalAs(UnmanagedType.LPWStr)] string ProxyList, [MarshalAs(UnmanagedType.LPWStr)] string ProxyBypassList);
  new void GetProxySettings(out BG_JOB_PROXY_USAGE pProxyUsage, [MarshalAs(UnmanagedType.LPWStr)] out string pProxyList, [MarshalAs(UnmanagedType.LPWStr)] out string pProxyBypassList);
  new void TakeOwnership();
  void SetNotifyCmdLine([In, MarshalAs(UnmanagedType.LPWStr)] string Program, [In, MarshalAs(UnmanagedType.LPWStr)] string Parameters);
  void GetNotifyCmdLine([MarshalAs(UnmanagedType.LPWStr)] out string pProgram, [MarshalAs(UnmanagedType.LPWStr)] out string pParameters);
  void GetReplyProgress([Out] out _BG_JOB_REPLY_PROGRESS pProgress);
  void GetReplyData([In, Out] IntPtr ppBuffer, out ulong pLength);
  void SetReplyFileName([In, MarshalAs(UnmanagedType.LPWStr)] string ReplyFileName);
  void GetReplyFileName([MarshalAs(UnmanagedType.LPWStr)] out string pReplyFileName);
  void SetCredentials([In] ref BG_AUTH_CREDENTIALS Credentials);
  void RemoveCredentials(BG_AUTH_TARGET Target, BG_AUTH_SCHEME Scheme);
 }
 [GuidAttribute("19C613A0-FCB8-4F28-81AE-897C3D078F81")]
 [InterfaceTypeAttribute(ComInterfaceType.InterfaceIsIUnknown)]
 [ComImportAttribute()]
 internal interface IBackgroundCopyError {
  void GetError(out BG_ERROR_CONTEXT pContext, [MarshalAs(UnmanagedType.Error)] out int pCode);
  void GetFile([MarshalAs(UnmanagedType.Interface)] out IBackgroundCopyFile pVal);
  void GetErrorDescription(uint LanguageId, [MarshalAs(UnmanagedType.LPWStr)] out string pErrorDescription);
  void GetErrorContextDescription(uint LanguageId, [MarshalAs(UnmanagedType.LPWStr)] out string pContextDescription);
  void GetProtocol([MarshalAs(UnmanagedType.LPWStr)] out string pProtocol);
 }
 [InterfaceTypeAttribute(ComInterfaceType.InterfaceIsIUnknown)]
 [GuidAttribute("1AF4F612-3B71-466F-8F58-7B6F73AC57AD")]
 [ComImportAttribute()]
 internal interface IEnumBackgroundCopyJobs {
  void Next(uint celt, [MarshalAs(UnmanagedType.Interface)] out IBackgroundCopyJob rgelt, out uint pceltFetched);
  void Skip(uint celt);
  void Reset();
  void Clone([MarshalAs(UnmanagedType.Interface)] out IEnumBackgroundCopyJobs ppenum);
  void GetCount(out uint puCount);
 }
 [InterfaceTypeAttribute(ComInterfaceType.InterfaceIsIUnknown)]
 [GuidAttribute("CA51E165-C365-424C-8D41-24AAA4FF3C40")]
 [ComImportAttribute()]
 internal interface IEnumBackgroundCopyFiles {
  void Next(uint celt, [MarshalAs(UnmanagedType.Interface)] out IBackgroundCopyFile rgelt, out uint pceltFetched);
  void Skip(uint celt);
  void Reset();
  void Clone([MarshalAs(UnmanagedType.Interface)] out IEnumBackgroundCopyFiles ppenum);
  void GetCount(out uint puCount);
 }
 [GuidAttribute("01B7BD23-FB88-4A77-8490-5891D3E4653A")]
 [InterfaceTypeAttribute(ComInterfaceType.InterfaceIsIUnknown)]
 [ComImportAttribute()]
 internal interface IBackgroundCopyFile {
  void GetRemoteName([MarshalAs(UnmanagedType.LPWStr)] out string pVal);
  void GetLocalName([MarshalAs(UnmanagedType.LPWStr)] out string pVal);
  void GetProgress(out _BG_FILE_PROGRESS pVal);
 }
 public enum BG_AUTH_SCHEME {
  BG_AUTH_SCHEME_BASIC = 1,
  BG_AUTH_SCHEME_DIGEST = 2,
  BG_AUTH_SCHEME_NTLM = 3,
  BG_AUTH_SCHEME_NEGOTIATE = 4,
  BG_AUTH_SCHEME_PASSPORT = 5,
 }
 public enum BG_AUTH_TARGET {
  BG_AUTH_TARGET_SERVER = 1,
  BG_AUTH_TARGET_PROXY = 2,
 }
 internal enum BG_JOB_STATE {
  BG_JOB_STATE_QUEUED = 0,
  BG_JOB_STATE_CONNECTING = 1,
  BG_JOB_STATE_TRANSFERRING = 2,
  BG_JOB_STATE_SUSPENDED = 3,
  BG_JOB_STATE_ERROR = 4,
  BG_JOB_STATE_TRANSIENT_ERROR = 5,
  BG_JOB_STATE_TRANSFERRED = 6,
  BG_JOB_STATE_ACKNOWLEDGED = 7,
  BG_JOB_STATE_CANCELLED = 8,
  BG_JOB_STATE_UPDATE_AVAILABLE = 1001,
  BG_JOB_STATE_VALIDATION_SUCCESS = 1002,
  BG_JOB_STATE_VALIDATION_FAILED = 1003,
 }
 internal enum BG_JOB_TYPE {
  BG_JOB_TYPE_DOWNLOAD = 0,
 }
 [Flags]
 internal enum BG_JOB_NOTIFICATION_TYPE : uint {
  BG_NOTIFY_JOB_TRANSFERRED = 0x0001,
  BG_NOTIFY_JOB_ERROR = 0x0002,
  BG_NOTIFY_DISABLE = 0x0004,
  BG_NOTIFY_JOB_MODIFICATION = 0x0008,
 }
 internal enum BG_JOB_PROXY_USAGE {
  BG_JOB_PROXY_USAGE_PRECONFIG = 0,
  BG_JOB_PROXY_USAGE_NO_PROXY = 1,
  BG_JOB_PROXY_USAGE_OVERRIDE = 2,
 }
 internal enum BG_JOB_PRIORITY {
  BG_JOB_PRIORITY_FOREGROUND = 0,
  BG_JOB_PRIORITY_HIGH = 1,
  BG_JOB_PRIORITY_NORMAL = 2,
  BG_JOB_PRIORITY_LOW = 3,
 }
 [StructLayout(LayoutKind.Explicit, Size=16, Pack=4)]
 internal struct BG_AUTH_CREDENTIALS {
  [FieldOffset(0)]
  public BG_AUTH_TARGET Target;
  [FieldOffset(4)]
  public BG_AUTH_SCHEME Scheme;
  [FieldOffset(8)]
  public BG_AUTH_CREDENTIALS_UNION Credentials;
 }
 [StructLayout(LayoutKind.Explicit, Size=8, Pack=4)]
 internal struct BG_AUTH_CREDENTIALS_UNION {
  [FieldOffset(0)]
  public BG_BASIC_CREDENTIALS Basic;
 }
 [StructLayout(LayoutKind.Explicit, Size=8, Pack=4)]
 internal struct BG_BASIC_CREDENTIALS {
  [FieldOffset(0)]
  [MarshalAs(UnmanagedType.LPWStr)]
  public string UserName;
  [FieldOffset(4)]
  [MarshalAs(UnmanagedType.LPWStr)]
  public string Password;
 }
 internal enum BG_ERROR_CONTEXT {
  BG_ERROR_CONTEXT_NONE = 0,
  BG_ERROR_CONTEXT_UNKNOWN = 1,
  BG_ERROR_CONTEXT_GENERAL_QUEUE_MANAGER = 2,
  BG_ERROR_CONTEXT_QUEUE_MANAGER_NOTIFICATION = 3,
  BG_ERROR_CONTEXT_LOCAL_FILE = 4,
  BG_ERROR_CONTEXT_REMOTE_FILE = 5,
  BG_ERROR_CONTEXT_GENERAL_TRANSPORT = 6,
 }
 [StructLayoutAttribute(LayoutKind.Sequential, Pack=4, Size=0)]
 internal struct _BG_FILE_INFO {
  [MarshalAs(UnmanagedType.LPWStr)]
  public string RemoteName;
  [MarshalAs(UnmanagedType.LPWStr)]
  public string LocalName;
 }
 [StructLayoutAttribute(LayoutKind.Sequential, Pack=8, Size=0)]
 internal struct _BG_JOB_PROGRESS {
  public ulong BytesTotal;
  public ulong BytesTransferred;
  public uint FilesTotal;
  public uint FilesTransferred;
 }
 [StructLayout(LayoutKind.Sequential, Pack=8)]
 internal struct _BG_JOB_REPLY_PROGRESS {
  public ulong BytesTotal;
  public ulong BytesTransferred;
 }
 [StructLayoutAttribute(LayoutKind.Sequential, Pack=4, Size=0)]
 internal struct _BG_JOB_TIMES {
  public _FILETIME CreationTime;
  public _FILETIME ModificationTime;
  public _FILETIME TransferCompletionTime;
 }
 [StructLayoutAttribute(LayoutKind.Sequential, Pack=4, Size=0)]
 internal struct _FILETIME {
  public uint dwLowDateTime;
  public uint dwHighDateTime;
 }
 [StructLayoutAttribute(LayoutKind.Sequential, Pack=8, Size=0)]
 internal struct _BG_FILE_PROGRESS {
  public ulong BytesTotal;
  public ulong BytesTransferred;
  public int Completed;
 }
}

