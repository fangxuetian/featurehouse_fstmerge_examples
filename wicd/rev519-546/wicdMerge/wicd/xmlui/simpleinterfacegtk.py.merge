import pygtk
pygtk.require('2.0')
import gtk
import xmlui
class GrayLabel(gtk.Label):
    """ Creates a grey gtk.Label. """
    def __init__(self):
        gtk.Label.__init__(self)
    def set_label(self, text):
        self.set_markup("<span color=\"#666666\">" + text + "</span>")
        self.set_alignment(0, 0)
class InterfaceItems:
    class BaseInterfaceItem(object):
        top_level = False
        def __init__(self, callback_handler):
            self.callback_handler = callback_handler
        def set_label(self, text):
            self.control.set_label(text)
        def set_name(self, name):
            self.name = name
    class SimpleVBox(BaseInterfaceItem):
        top_level = True
        def __init__(self, callback_handler):
            super(InterfaceItems.BaseInterfaceItem, self).__init__(callback_handler)
            self.callback_handler = callback_handler
            self.control = gtk.VBox()
        def add(self, item):
            self.control.pack_start(item)
    class SimpleHBox(BaseInterfaceItem):
        top_level = True
        def __init__(self, callback_handler):
            super(InterfaceItems.BaseInterfaceItem, self).__init__(callback_handler)
            self.callback_handler = callback_handler
            self.control = gtk.HBox()
        def add(self, item):
            self.control.pack_start(item)
    class SimpleExpander(BaseInterfaceItem):
        top_level = True
        def __init__(self, callback_handler):
            super(InterfaceItems.BaseInterfaceItem, self).__init__(callback_handler)
            self.callback_handler = callback_handler
            self.control = gtk.Expander()
        def add(self, item):
            self.control.add(item)
    class SimpleCheckbox(BaseInterfaceItem):
        def __init__(self, callback_handler):
            super(InterfaceItems.BaseInterfaceItem, self).__init__(callback_handler)
            self.callback_handler = callback_handler
            self.control = gtk.CheckButton()
            self.control.connect('toggled', self._toggled)
            self.toggled_callbacks = []
        def connect_toggled(self, callback):
            self.toggled_callbacks.append(callback)
        def _toggled(self, active):
            for callback in self.toggled_callbacks:
                callback(self.callback_handler, self)
        def get_value(self):
            return self.control.get_active()
        def set_value(self, value):
            return self.control.set_active(value)
    class SimpleButton(BaseInterfaceItem):
        def __init__(self, callback_handler):
            super(InterfaceItems.BaseInterfaceItem, self).__init__(callback_handler)
            self.callback_handler = callback_handler
            self.control = gtk.Button()
            self.control.connect('clicked', self._clicked)
            self.clicked_callbacks = []
        def connect_clicked(self, callback):
            self.clicked_callbacks.append(callback)
        def _clicked(self, button):
            for callback in self.clicked_callbacks:
                callback(self.callback_handler, self)
    class SimpleTextbox(BaseInterfaceItem):
        def __init__(self, callback_handler):
            super(InterfaceItems.BaseInterfaceItem, self).__init__(callback_handler)
            self.callback_handler = callback_handler
            self.control = gtk.Entry()
        def get_value(self):
            return self.control.get_text()
        def set_value(self, text):
            return self.control.set_text(text)
    class SimpleLabel(BaseInterfaceItem):
        def __init__(self, callback_handler):
            super(InterfaceItems.BaseInterfaceItem, self).__init__(callback_handler)
            self.callback_handler = callback_handler
            self.control = gtk.Label()
    class SimpleGrayLabel(BaseInterfaceItem):
        def __init__(self, callback_handler):
            super(InterfaceItems.BaseInterfaceItem, self).__init__(callback_handler)
            self.callback_handler = callback_handler
            self.control = GrayLabel()
    class BaseFileDialog(BaseInterfaceItem):
        def set_label(self, text):
            pass
    class SimpleFileOpenDialog(BaseFileDialog):
        def __init__(self, callback_handler):
            super(InterfaceItems.BaseInterfaceItem, self).__init__(callback_handler)
            self.callback_handler = callback_handler
            self.control = gtk.Button('...')
            self.control.connect('clicked', self.run)
            self.selected_callbacks = []
            self.dialog = None
        def set_filter(self):
            pass
        def connect_selected(self, callback):
            self.selected_callbacks.append(callback)
        def run(self, widget=None):
            self.dialog = gtk.FileChooserDialog(title=None,
                    action=gtk.FILE_CHOOSER_ACTION_OPEN,
                    buttons=(gtk.STOCK_CANCEL,gtk.RESPONSE_CANCEL
                            ,gtk.STOCK_OPEN,gtk.RESPONSE_OK))
            response = self.dialog.run()
            if response == gtk.RESPONSE_OK:
                self.last_file_name = self.dialog.get_filename()
                for callback in self.selected_callbacks:
                    callback(self.callback_handler, self)
            self.dialog.destroy()
        def get_value(self):
            return self.last_file_name
class GtkWindow:
    def __init__(self, *gtkobjects):
        self.window = gtk.Window(gtk.WINDOW_TOPLEVEL)
        self.window.connect("delete_event", self.delete_event)
        self.window.connect("destroy", self.destroy)
        self.window.set_border_width(10)
        vbox = gtk.VBox()
        for object in gtkobjects:
            vbox.pack_start(object)
        self.window.add(vbox)
        vbox.show_all()
        self.window.show()
    def delete_event(self, widget, event, data=None):
        return False
    def destroy(self, widget, data=None):
        gtk.main_quit()
    def main(self):
        gtk.main()
def generate_interface(xmlstring, callback_handler):
    return xmlui.generate_interface(xmlstring, callback_handler, InterfaceItems)
def run(file, cbh):
    interface, controls = generate_interface(file, cbh)
    cbh.controls = controls
    window = GtkWindow(interface.control)
    window.main()

