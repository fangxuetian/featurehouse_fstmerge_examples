""" wicd - wireless connection daemon implementation.
This module implements the wicd daemon that provides network
connection management, for both wireless and wired networks. The daemon
must be run as root to control the networks, however the user interface
components should be run as a normal user.
class WicdDaemon -- The main DBus daemon for Wicd.
def usage() -- Print usage information.
def daemonize() -- Daemonize the current process with a double fork.
def main() -- The wicd daemon main loop.
"""
import sys, os, optparse, signal
import gobject
import dbus
import dbus.service
if getattr(dbus, 'version', (0, 0, 0)) < (0, 80, 0):
    import dbus.glib
else:
    from dbus.mainloop.glib import DBusGMainLoop
    DBusGMainLoop(set_as_default=True)
import wpath
import misc
from logfile import ManagedStdio
from interfacemanager import InterfaceManager
if __name__ == '__main__':
    wpath.chdir(__file__)
misc.RenameProcess("wicd")
class WicdDaemon(dbus.service.Object):
    def __init__(self, bus_name, options, object_path="/org/wicd/daemon"):
        ''' Creates a new WicdDaemon object. '''
        dbus.service.Object.__init__(self, bus_name=bus_name,
                                     object_path=object_path)
        self.interface_manager = InterfaceManager()
        self.options = options
        if not options.no_load_configuration:
            self.LoadConfiguration()
    @dbus.service.method('org.wicd.daemon')
    def GetVersion(self):
        """ Returns the version number.
        This number is major-minor-micro. Major is the major version of Wicd.
        Minor in incremented if Wicd undergoes major changes.
        Minor can be anything >= 0. Micro is for everything else, and micro
        may be anything >= 0. This number is effective starting wicd v1.2.0.
        """
<<<<<<< /work/joliebig/workspace_sple/featurehouse/fstmerge/fstmerge_tmp1309793777103/fstmerge_var1_8527051613066546891
        version = '1.5.4'
        print 'returned version number', version
=======
        version = 'VPB 0.1.0'
>>>>>>> /work/joliebig/workspace_sple/featurehouse/fstmerge/fstmerge_tmp1309793777103/fstmerge_var2_7809181557370935477
        return version
    @dbus.service.method('org.wicd.daemon.interface')
    def GetInterfaces(self):
        ''' Updates the current state of the interfaces.
        In a wireless interface this might involve
        scanning for networks. In a wired network, this
        might involve check for a wire.
        '''
        return self.interface_manager.get_all_names()
    @dbus.service.method('org.wicd.daemon.interface')
    def CreateNewInterface(self, type, name):
        self.interface_manager.create(type, name)
    def _has_data(self, data_tuple):
        ''' Used to convert tuples sent over DBus to real tuples. '''
        if data_tuple in [('dbusdoesntallowemptytuples',), None, ()]:
            return None
        else:
<<<<<<< /work/joliebig/workspace_sple/featurehouse/fstmerge/fstmerge_tmp1309793777103/fstmerge_var1_8527051613066546891
            height_str = "pref_height"
            width_str = "pref_width"
        config = ConfigParser.ConfigParser()
        config.read(self.app_conf)
        if config.has_section("Settings"):
            config.set("Settings", width_str, width)
            config.set("Settings", height_str, height)
            config.write(open(self.app_conf, "w"))
    @dbus.service.method('org.wicd.daemon.config')
    def ReadWindowSize(self, win_name):
        """Returns a list containing the desired default window size
        Attempts to read the default size from the config file,
        and if that fails, returns a default of 605 x 400.
        """
        default_width = default_height = width_str = height_str = -1
        if win_name == "main":
            default_width = 605
            default_height = 400
            width_str = "window_width"
            height_str = "window_height"
        else:
            default_width = 125
            default_height = 590
            width_str = "pref_width"
            height_str = "pref_height"
        width = height = -1
        config = ConfigParser.ConfigParser()
        config.read(self.app_conf)
        if config.has_section("Settings"):
            if config.has_option("Settings", width_str):
                width = config.get("Settings", width_str)
            else:
                width = default_width
            if config.has_option("Settings", height_str):
                height = config.get("Settings", height_str)
            else:
                height = default_height
        size = []
        size.append(int(width))
        size.append(int(height))
        return size
    def __printReturn(self, text, value):
        """prints the specified text and value, then returns the value"""
        if self.debug_mode:
            print ''.join([text, " ", str(value)])
        return value
    def get_option(self, section, option, default=None):
        """ Method for returning an option from manager-settings.conf.
        This method will return a given option from a given section
        """
        config = ConfigParser.ConfigParser()
        config.read(self.app_conf)
        if not config.has_section(section):
            config.add_section(section)
        if config.has_option(section, option):
            ret = config.get(section, option)
            print ''.join(['found ', option, ' in configuration ', ret])
        else:
            config.set(section, option, default)
            ret = default
        config.write(open(self.app_conf, "w"))
        return ret
    def ReadConfig(self):
        """ Reads the manager-settings.conf file.
        Reads the manager-settings.conf file and loads the stored
        values into memory.
        """
        if os.path.isfile(self.app_conf):
            iface = self.DetectWirelessInterface()
            if not iface:
                if self.debug_mode:
                    print "Failed to detect wireless interface, defaulting " + \
                          "to wlan0, unless a config entry already exists."
                iface = "wlan0"
            self.SetWirelessInterface(self.get_option("Settings",
                                                      "wireless_interface",
                                                      default=iface))
            iface = self.DetectWiredInterface()
            if not iface:
                if self.debug_mode:
                    print "Failed to detect wired interface, defaulting " + \
                          "to eth0, unless a config entry already exists."
                iface = "eth0"
            self.SetWiredInterface(self.get_option("Settings",
                                                   "wired_interface",
                                                   default=iface))
            self.SetWPADriver(self.get_option("Settings", "wpa_driver",
                                              default="wext"))
            self.SetAlwaysShowWiredInterface(self.get_option("Settings",
                                                             "always_show_wired_interface",
                                                             default=False))
            self.SetUseGlobalDNS(self.get_option("Settings", "use_global_dns",
                                                 default=False))
            dns1 = self.get_option("Settings", "global_dns_1", default='None')
            dns2 = self.get_option("Settings", "global_dns_2", default='None')
            dns3 = self.get_option("Settings", "global_dns_3", default='None')
            self.SetGlobalDNS(dns1, dns2, dns3)
            self.SetAutoReconnect(self.get_option("Settings", "auto_reconnect",
                                                  default=True))
            self.SetDebugMode(self.get_option("Settings", "debug_mode",
                                              default=False))
            self.SetWiredAutoConnectMethod(self.get_option("Settings",
                                                           "wired_connect_mode",
                                                           default=1))
            self.SetSignalDisplayType(self.get_option("Settings",
                                                      "signal_display_type",
                                                      default=0))
            self.SetDHCPClient(self.get_option("Settings", "dhcp_client",
                                               default=0))
            self.SetLinkDetectionTool(self.get_option("Settings",
                                                      "link_detect_tool",
                                                      default=0))
            self.SetFlushTool(self.get_option("Settings", "flush_tool",
                                              default=0))
        else:
            print "Configuration file not found, creating, adding defaults..."
            config = ConfigParser.ConfigParser()
            config.read(self.app_conf)
            config.add_section("Settings")
            config.set("Settings", "wireless_interface", "wlan0")
            config.set("Settings", "wired_interface", "eth0")
            config.set("Settings", "always_show_wired_interface", "False")
            config.set("Settings", "auto_reconnect", "True")
            config.set("Settings", "debug_mode", "False")
            config.set("Settings", "wired_connect_mode", "1")
            config.set("Settings", "signal_display_type", "0")
            config.set("Settings", "dhcp_client", "0")
            config.set("Settings", "link_detect_tool", "0")
            config.set("Settings", "flush_tool", "0")
            config.set("Settings", "dns1", "None")
            config.set("Settings", "dns2", "None")
            config.set("Settings", "dns3", "None")
            iface = self.DetectWirelessInterface()
            if iface is not None:
                config.set("Settings", "wireless_interface", iface)
            else:
                print "Couldn't detect a wireless interface, using wlan0..."
                config.set("Settings", "wireless_interface", "wlan0")
            iface = self.DetectWiredInterface()
            if iface is not None:
                config.set("Settings", "wired_interface", iface)
            else:
                print "Couldn't detect a wired interface, using eth0..."
                config.set("Settings", "wired_interface", "eth0")
            config.set("Settings", "wpa_driver", "wext")
            config.write(open(self.app_conf, "w"))
            self.SetWirelessInterface(config.get("Settings",
                                                 "wireless_interface"))
            self.SetWiredInterface(config.get("Settings",
                                              "wired_interface"))
            self.SetWPADriver(config.get("Settings",
                                         "wpa_driver"))
            self.SetDHCPClient(config.get("Settings", "dhcp_client"))
            self.SetLinkDetectionTool(config.get("Settings",
                                                 "link_detect_tool"))
            self.SetFlushTool(config.get("Settings", "flush_tool"))
            self.SetAlwaysShowWiredInterface(False)
            self.SetAutoReconnect(True)
            self.SetDebugMode(False)
            self.SetWiredAutoConnectMethod(1)
            self.SetSignalDisplayType(0)
            self.SetUseGlobalDNS(False)
            self.SetGlobalDNS(None, None, None)
        if os.path.isfile(self.wireless_conf):
            print "Wireless configuration file found..."
            pass
        else:
            print "Wireless configuration file not found, creating..."
            open(self.wireless_conf, "w").close()
        if os.path.isfile(self.wired_conf):
            print "Wired configuration file found..."
            pass
        else:
            print "Wired configuration file not found, creating a default..."
            open(self.wired_conf, "w").close()
            self.CreateWiredNetworkProfile("wired-default", default=True)
        print "chmoding configuration files 0600..."
        os.chmod(self.app_conf, 0600)
        os.chmod(self.wireless_conf, 0600)
        os.chmod(self.wired_conf, 0600)
        print "chowning configuration files root:root..."
        os.chown(self.app_conf, 0, 0)
        os.chown(self.wireless_conf, 0, 0)
        os.chown(self.wired_conf, 0, 0)
        print "Using wired interface..." + self.GetWiredInterface()
        print "Using wireless interface..." + self.GetWirelessInterface()
def usage():
    print """
wicd 1.5.4
wireless (and wired) connection daemon.
Arguments:
\t-a\t--no-autoconnect\tDon't auto-scan/auto-connect.
\t-f\t--no-daemon\tDon't daemonize (run in foreground).
\t-e\t--no-stderr\tDon't redirect stderr.
\t-n\t--no-poll\tDon't monitor network status.
\t-o\t--no-stdout\tDon't redirect stdout.
\t-h\t--help\t\tPrint this help.
"""
=======
            return data_tuple
    @dbus.service.method('org.wicd.daemon.interface')
    def GetInterfaceData(self, interface_name, method_name, data):
        ''' Gets the specified data from the specified interface. '''
        return self._interface_action(interface_name, method_name, data, 'get_')
    @dbus.service.method('org.wicd.daemon.interface')
    def SetInterfaceData(self, interface_name, method_name, data):
        ''' Sets the specified data on the specified interface. '''
        self._interface_action(interface_name, method_name, data, 'set_')
    @dbus.service.method('org.wicd.daemon.interface')
    def DoInterfaceAction(self, interface_name, method_name, data):
        ''' Runs the specified command on the specified interface. '''
        self._interface_action(interface_name, method_name, data, 'do_')
    def _interface_action(self, interface_name, method_name, data, prefix):
        ''' Runs a specified action on a specified method that starts with prefix. '''
        interface = self.interface_manager.get(interface_name)
        method = getattr(interface, prefix + method_name)
        print '%s interface action calling %s' % (prefix[:-1], method)
        if self._has_data(data):
            return method(*data)
        else:
            return method()
    @dbus.service.method('org.wicd.daemon')
    def SaveConfiguration(self):
        ''' Saves the state of the daemon. '''
        print 'saving configuration...'
        self.interface_manager.save()
    @dbus.service.method('org.wicd.daemon')
    def LoadConfiguration(self):
        ''' Loads the saved state of the daemon. '''
        print 'loading configuration...'
        self.interface_manager.load()
>>>>>>> /work/joliebig/workspace_sple/featurehouse/fstmerge/fstmerge_tmp1309793777103/fstmerge_var2_7809181557370935477
def daemonize():
    """ Disconnect from the controlling terminal.
    Fork twice, once to disconnect ourselves from the parent terminal and a
    second time to prevent any files we open from becoming our controlling
    terminal.
    For more info see:
    http://aspn.activestate.com/ASPN/Cookbook/Python/Recipe/66012
    """
    try:
        pid = os.fork()
        if pid > 0:
            sys.exit(0)
    except OSError, e:
        print >> sys.stderr, "Fork #1 failed: %d (%s)" % (e.errno, e.strerror)
        sys.exit(1)
    os.setsid()
    os.umask(0)
    try:
        pid = os.fork()
        if pid > 0:
            dirname = os.path.dirname(wpath.pidfile)
            if not os.path.exists(dirname):
                os.makedirs(dirname)
            pidfile = open(wpath.pidfile, 'w')
            pidfile.write(str(pid) + '\n')
            pidfile.close()
            sys.exit(0)
    except OSError, e:
        print >> sys.stderr, "Fork #2 failed: %d (%s)" % (e.errno, e.strerror)
        sys.exit(1)
    sys.stdout.flush()
    sys.stderr.flush()
    os.close(sys.__stdin__.fileno())
    os.close(sys.__stdout__.fileno())
    os.close(sys.__stderr__.fileno())
    sys.stdin = open('/dev/null', 'r')
def main(argv):
    """ The main daemon program.
    Keyword arguments:
    argv -- The arguments passed to the script.
    """
    global child_pid
    do_daemonize = True
    redirect_stderr = True
    redirect_stdout = True
    auto_connect = True
    p = optparse.OptionParser()
    p.add_option('--no-daemon', '-f', action='store_true')
    p.add_option('--no-stdout', '-o', action='store_true')
    p.add_option('--no-stderr', '-e', action='store_true')
    p.add_option('--no-autoconnect', '-a', action='store_true')
    p.add_option('--no-load-configuration', '-n', action='store_true')
    p.add_option('--add-current-dir-to-pythonpath', '-p', action='store_true')
    options, arguments = p.parse_args()
    if not options.no_daemon: daemonize()
    if (not options.no_stdout) or (not options.no_stderr):
        logpath = os.path.join(wpath.log, 'wicd.log')
        output = ManagedStdio(logpath)
        if os.path.exists(logpath):
            try:
                os.chmod(logpath, 0600)
            except:
                print 'unable to chmod log file to 0600'
    if not options.no_stdout: sys.stdout = output
    if not options.no_stderr: sys.stderr = output
    if options.add_current_dir_to_pythonpath:
        print 'adding',os.getcwd(),'to path'
        sys.path.insert(0, os.getcwd())
    print 'Wicd starting...'
    bus = dbus.SystemBus()
    wicd_bus = dbus.service.BusName('org.wicd.daemon', bus=bus)
    daemon = WicdDaemon(wicd_bus, options)
    gobject.threads_init()
    signal.signal(signal.SIGTERM, sigterm_caught)
    mainloop = gobject.MainLoop()
    mainloop.run()
def sigterm_caught(sig, frame):
    """ Called when a SIGTERM is caught, kills monitor.py before exiting. """
    global child_pid
    print 'SIGTERM caught, killing wicd-monitor...'
    os.kill(child_pid, signal.SIGTERM)
    print 'Removing PID file...'
    if os.path.exists(wpath.pidfile):
        os.remove(wpath.pidfile)
    print 'Shutting down...'
    sys.exit(0)
if __name__ == '__main__':
    if os.getuid() != 0:
        print ("Root priviledges are required for the daemon to run properly." +
               "  Exiting.")
        sys.exit(1)
    main(sys.argv)

